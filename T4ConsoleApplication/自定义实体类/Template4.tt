<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="daoru.ttinclude" #>
<#
	//命名空间
	string nspace = "LAFAFGS.Domain.Model";
	//类名
	string className = "cn";
	//接口名
	string interfaceName = "";
	//是否生成检查类
	bool isCheck = false;
	//属性
	//List<PropList> data = getData();
	List<PropList> data = new List<PropList>()
    {
		new PropList(){ Name = "ID", PropType = "Guid", Describe = ""},
		new PropList() { Name = "SRGID", PropType = "Guid", Describe = "代偿ID"},
		new PropList() { Name = "LoseDate", PropType = "DateTime", Describe = "损失日期", ISCheck = true },
		new PropList() { Name = "LoseAmount", PropType = "string", Describe = "损失金额", ISCheck = true ,IsLenght = 20},
		new PropList() { Name = "UPD", PropType = "DateTime", Describe = "" },
		new PropList() { Name = "Status", PropType = "int", Describe = "" }
	};	
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//	   生成时间 <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#>
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Text;

namespace <#= nspace #>
{
	public class <#= className #> <# if(interfaceName != ""){#> : <#= interfaceName #>  <# } #> 
	{
		#region 构造方法

		public <#= className #>()
		{
		
		}

		#endregion

		#region 属性	

		<# foreach(var dic in data){ #>
/// <summary>
		/// <#= dic.Describe #>
		/// <#= dic.ISNullable ? "选填项可为null" : "必填项"#>
		/// </summary>
		public <#= dic.PropType #> <#= dic.Name #> { get; set; }
		<# } #>


		#endregion

	}

	<# if(isCheck){ #>
	
	
	

	/// <summary>
    /// <#= className + "字段长度检查" #>
    /// </summary>
	public static class <#= className + "Check" #>
	{
		/// <summary>
        /// 计算string转换为GBK后的数据长度
        /// </summary>
        /// <param name="Text"></param>
        /// <returns></returns>
		public static int Text_Length(string Text)
        {
            int len = 0;

            for (int i = 0; i < Text.Length; i++)
            {
                byte[] byte_len = Encoding.GetEncoding("GBK").GetBytes(Text.Substring(i, 1));
                if (byte_len.Length > 1)
                    len += 2;  //如果长度大于1，是中文，占两个字节，+2
                else
                    len += 1;  //如果长度等于1，是英文，占一个字节，+1
            }

            return len;
        }

		<# foreach(var dic in data){
			string dicType = dic.PropType;
		 if(dic.ISCheck){#>
public static bool <#= "Check_" + dic.Name #> (<#= dicType #> <#= dic.Name #>)
        {
		<# if(dicType == "string"){ #>
	return Text_Length(<#= dic.Name #>) <= <#= dic.IsLenght #> ? true : false;
		<# }else if(dicType == "int"){ #>
return (<#= dic.Name #>).ToString().Length <= <#= dic.IsLenght #> ? true : false;
		<# }else{ #>
	return <#= dic.Name #> != null ? true : false;
		<# } #>
}
			
		<# }
	 } #>

	}
<#}#>
}


